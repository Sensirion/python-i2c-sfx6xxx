Search.setIndex({"docnames": ["api", "build-documentation", "development", "execute-measurements", "index", "installation", "quickstart", "run-tests"], "filenames": ["api.rst", "build-documentation.rst", "development.rst", "execute-measurements.rst", "index.rst", "installation.rst", "quickstart.rst", "run-tests.rst"], "titles": ["API Documentation", "Build documentation", "Development", "Execute measurements with SensorBridge", "Sensirion SFX6XXX I2C Python Driver", "Installation", "Quick Start", "Run tests"], "terms": {"The": [0, 1, 3, 5, 7], "class": 0, "sfx6xxxdevicebas": [0, 4], "implement": [0, 7], "low": 0, "level": 0, "interfac": [0, 4], "sensor": [0, 3, 4, 7], "extend": 0, "It": [0, 4], "provid": [0, 4, 7], "addit": 0, "function": 0, "eas": 0, "us": [0, 4, 6, 7], "sensirion_i2c_sfx6xxx": [0, 3, 5], "devic": [0, 3], "channel": [0, 3, 4], "sourc": 0, "__init__": [0, 4], "properti": 0, "read_product_identifi": [0, 3, 4], "read": 0, "product": [0, 3], "identifi": 0, "serial": [0, 3, 7], "number": 0, "return": 0, "product_identifi": [0, 3], "32": 0, "bit": 0, "revis": 0, "serial_numb": [0, 3], "64": 0, "uniqu": 0, "thi": [0, 3, 4], "i": [0, 1, 3, 5, 7], "onli": 0, "avail": 0, "while": 0, "measur": [0, 4, 6], "run": [0, 2, 3, 4], "reset_pointer_to_measurement_buff": [0, 4], "instruct": 0, "reset": 0, "i2c": [0, 3], "address": [0, 7], "pointer": 0, "regular": 0, "output": 0, "buffer": 0, "data": 0, "ar": 0, "obtain": 0, "upon": 0, "subsequ": 0, "header": 0, "update_setpoint": [0, 4], "setpoint": 0, "set": [0, 7], "flow": 0, "physic": 0, "valu": [0, 4], "which": [0, 4], "control": 0, "refer": 0, "input": 0, "paramet": [0, 3], "new": 0, "ha": 0, "given": 0, "two": 0, "": 0, "complement": 0, "format": 0, "also": 0, "0": [0, 3, 7], "calibr": 0, "chang": 0, "you": [0, 3, 7], "have": [0, 3, 7], "call": 0, "after": 0, "updat": 0, "applic": 0, "sfc6xxx": 0, "mass": 0, "update_init_step": [0, 4], "init_step": 0, "transmit": 0, "initstep": 0, "mfc": 0, "an": 0, "variant": 0, "specif": 0, "default": [0, 3, 7], "appli": 0, "hard": 0, "soft": 0, "rang": [0, 3], "1": [0, 3, 7], "multipli": 0, "2": [0, 3], "16": 0, "init": 0, "step": [0, 3], "update_customer_gain": [0, 4], "customer_gain": 0, "customergain": 0, "A": 0, "4": 0, "14": 0, "start_o2_continuous_measur": [0, 3, 4], "start": [0, 4, 7], "continu": [0, 3], "o\u2082": 0, "start_air_continuous_measur": [0, 4], "air": 0, "start_co2_continuous_measur": [0, 4], "co\u2082": 0, "start_n2o_continuous_measur": [0, 4], "n\u2082o": 0, "start_ar_continuous_measur": [0, 4], "start_raw_thermal_conductivity_continuous_measur": [0, 4], "raw": 0, "thermal": 0, "conduct": 0, "In": 0, "mode": 0, "valv": 0, "remain": 0, "close": 0, "replac": 0, "start_o2_in_air_continuous_measur": [0, 4], "volume_fract": 0, "ga": 0, "mixtur": 0, "o2": 0, "volum": 0, "fraction": 0, "per": 0, "mill": 0, "stop_continuous_measur": [0, 3, 4], "transfer": 0, "stop": 0, "put": 0, "idl": 0, "receiv": 0, "need": 0, "up": 0, "m": 0, "power": 0, "down": 0, "heater": 0, "enter": 0, "recept": 0, "read_measurement_data": [0, 4], "out": 0, "from": [0, 3], "signal": 0, "reserv": 0, "futur": 0, "status_word": 0, "contain": [0, 4], "statu": 0, "inform": 0, "about": 0, "read_flow": [0, 3, 4], "get_raw_temperatur": [0, 4], "temperatur": 0, "bulk": 0, "silicon": 0, "chip": 0, "can": [0, 3, 5, 7], "special": 0, "transmiss": 0, "sequenc": 0, "must": [0, 7], "without": [0, 7], "interrupt": 0, "To": [0, 7], "end": 0, "consist": 0, "multipl": 0, "detail": 0, "section": 0, "first": 0, "valid": 0, "12": 0, "e": [0, 7], "simplic": 0, "shall": 0, "acknowledg": 0, "make": 0, "sure": 0, "rate": 0, "significantli": 0, "slower": 0, "than": 0, "most": 0, "date": 0, "alwai": 0, "ack": 0, "correspond": 0, "henc": 0, "ident": 0, "intern": [0, 4, 6], "acquir": 0, "time": [0, 3], "case": 0, "where": 0, "nack": 0, "yet": 0, "scale": 0, "factor": 0, "200": 0, "force_open_valv": [0, 4], "fulli": 0, "open": 0, "still": 0, "reset_force_open_valv": [0, 4], "normal": 0, "regul": 0, "issu": 0, "force_close_valv": [0, 4], "reset_force_close_valv": [0, 4], "forc": 0, "update_gas_concentr": [0, 4], "concentr": 0, "binari": 0, "dynam": 0, "more": 0, "onc": 0, "millisecond": 0, "prepare_read_gas_calibr": [0, 4], "measurement_command": 0, "prepar": 0, "sent": 0, "befor": 0, "read_gas_calibr": [0, 4], "offset": 0, "unit": [0, 4, 7], "full": 0, "id": 0, "one": 0, "gase": 0, "flow_scale_factor": 0, "flow_offset": 0, "flow_unit": 0, "full_scale_flow": 0, "gas_id": 0, "repres": 0, "code": [0, 3], "assign": 0, "semi": 0, "standard": 0, "enable_raw_flow_valu": [0, 4], "There": 0, "might": 0, "benefici": 0, "uncalibr": 0, "dedic": 0, "request": 0, "oppos": 0, "linear": 0, "disable_raw_flow_valu": [0, 4], "caus": 0, "switch": 0, "back": 0, "enabl": 0, "driver": [0, 6, 7], "access": 0, "base": 0, "get_gas_calibr": [0, 4], "readout": 0, "co2": 0, "n2o": 0, "read_measurement_data_raw": [0, 4], "arg_0": 0, "a_status_word": 0, "a_flow": [0, 3], "read_flow_raw": [0, 4], "tick": 0, "liter": 0, "minut": 0, "read_raw_temperatur": [0, 4], "degre": 0, "celsiu": 0, "read_temperatur": [0, 4], "a_temperatur": 0, "appropri": 0, "dure": 0, "activ": 0, "slm": 0, "specifi": 0, "between": 0, "host": 0, "gener": [0, 3], "intend": 0, "direct": 0, "statuswordt": [0, 4], "int_valu": 0, "int": 0, "gas_conc": [0, 4], "bitfield": 0, "width": 0, "10": 0, "pressure_controller_function": [0, 4], "flow_controller_function": [0, 4], "11": 0, "command_cod": [0, 4], "flowunitt": [0, 4], "prefix": [0, 4], "time_bas": [0, 4], "8": [0, 3], "5": [0, 3], "errorcodet": [0, 4], "enumer": 0, "i2c_error": [0, 4], "timeout": [0, 4], "readproductidentifi": [0, 4], "cmd_id": [0, 4], "57602": 0, "pack": [0, 4], "tx": [0, 4], "sensirion_driver_adapt": [0, 3], "rx_tx_data": 0, "txdata": 0, "object": 0, "rx": [0, 4], "rxdata": 0, "resetpointertomeasurementbuff": [0, 4], "57344": 0, "updatesetpoint": [0, 4], "61524": 0, "updateinitstep": [0, 4], "57785": 0, "updatecustomergain": [0, 4], "57778": 0, "starto2continuousmeasur": [0, 4], "13827": 0, "startaircontinuousmeasur": [0, 4], "13832": 0, "startco2continuousmeasur": [0, 4], "13845": 0, "startn2ocontinuousmeasur": [0, 4], "13854": 0, "startarcontinuousmeasur": [0, 4], "13860": 0, "startrawthermalconductivitycontinuousmeasur": [0, 4], "starto2inaircontinuousmeasur": [0, 4], "13904": 0, "stopcontinuousmeasur": [0, 4], "16377": 0, "readmeasurementdata": [0, 4], "readflow": [0, 4], "getrawtemperatur": [0, 4], "forceopenvalv": [0, 4], "16356": 0, "resetforceopenvalv": [0, 4], "16229": 0, "forceclosevalv": [0, 4], "16367": 0, "resetforceclosevalv": [0, 4], "16238": 0, "updategasconcentr": [0, 4], "57725": 0, "preparereadgascalibr": [0, 4], "13921": 0, "readgascalibr": [0, 4], "57681": 0, "enablerawflowvalu": [0, 4], "16350": 0, "disablerawflowvalu": [0, 4], "16223": 0, "transform": 0, "meaning": 0, "result_typ": 0, "signaltemperatur": [0, 4], "temperature_raw": 0, "signalflow": [0, 4], "flow_raw": 0, "signalrawflow": [0, 4], "convert": 0, "user": [0, 3], "float": 0, "represent": 0, "built": 1, "sphinx": 1, "python": [1, 3], "setup": 1, "py": [1, 3], "instal": [1, 3, 4, 7], "packag": [1, 3, 4, 5], "pip": [1, 3, 5, 7], "r": 1, "doc": 1, "requir": [1, 3, 7], "txt": 1, "b": 1, "html": 1, "_build": 1, "test": [2, 4], "build": [2, 4], "document": [2, 4], "follow": [3, 7], "show": 3, "how": 3, "window": 3, "system": 3, "sensirion": 3, "sek": 3, "simpl": 3, "sfx6xxx": [3, 7], "all": [3, 7], "describ": 3, "shdlc": 3, "connect": [3, 7], "your": [3, 7], "pc": 3, "over": 3, "usb": 3, "root": 3, "repositori": 3, "By": 3, "assum": [3, 7], "com1": [3, 7], "port": [3, 7], "If": 3, "differ": 3, "pass": 3, "outlin": 3, "below": 3, "example_usage_sensorbridge_sfx6xxx": 3, "com": 3, "usr": 3, "bin": 3, "env": 3, "utf": 3, "c": 3, "copyright": 3, "2024": 3, "ag": 3, "switzerland": 3, "file": 3, "automat": 3, "40": 3, "model": 3, "version": 3, "3": 3, "import": 3, "argpars": 3, "sensirion_i2c_driv": 3, "i2cconnect": 3, "crccalcul": 3, "sensirion_shdlc_driv": 3, "shdlcserialport": 3, "shdlcconnect": 3, "sensirion_shdlc_sensorbridg": 3, "sensorbridgeport": 3, "sensorbridgeshdlcdevic": 3, "sensorbridgei2cproxi": 3, "i2c_adapt": 3, "i2c_channel": 3, "i2cchannel": 3, "sfx6xxxdevic": [3, 4], "parser": 3, "argumentpars": 3, "add_argu": 3, "p": 3, "arg": 3, "parse_arg": 3, "serial_port": 3, "baudrat": [3, 7], "460800": [3, 7], "bridg": 3, "slave_address": 3, "set_i2c_frequ": 3, "ONE": 3, "frequenc": 3, "100e3": 3, "set_supply_voltag": 3, "voltag": 3, "24": 3, "switch_supply_on": 3, "i2c_transceiv": 3, "0x24": 3, "crc": 3, "0x31": 3, "0xff": 3, "0x0": 3, "print": 3, "f": 3, "100": 3, "try": 3, "sleep": 3, "except": 3, "baseexcept": 3, "On": 3, "furthermor": 3, "possibl": 3, "space": 3, "directli": 3, "done": 3, "shown": 3, "raspberri": 3, "pi": 3, "dev": 3, "example_usage_linux_sfx6xxx": 3, "linuxi2ctransceiv": 3, "i2c_port": 3, "famili": 4, "hardwar": [4, 7], "independ": 4, "work": 4, "variou": 4, "transceiv": 4, "quick": 4, "execut": [4, 6, 7], "sensorbridg": [4, 6, 7], "exampl": [4, 6], "script": [4, 6], "linux": [4, 6], "i\u00b2c": [4, 6], "develop": 4, "api": 4, "command": [4, 7], "result": 4, "type": 4, "recommend": 5, "usag": 5, "within": 5, "virtualenv": 5, "pytest": 7, "we": 7, "mock": 7, "allow": 7, "real": 7, "attach": 7}, "objects": {"sensirion_i2c_sfx6xxx": [[0, 0, 0, "-", "commands"], [0, 0, 0, "-", "device"], [0, 0, 0, "-", "result_types"]], "sensirion_i2c_sfx6xxx.commands": [[0, 1, 1, "", "DisableRawFlowValues"], [0, 1, 1, "", "EnableRawFlowValues"], [0, 1, 1, "", "ErrorCodeT"], [0, 1, 1, "", "FlowUnitT"], [0, 1, 1, "", "ForceCloseValve"], [0, 1, 1, "", "ForceOpenValve"], [0, 1, 1, "", "GetRawTemperature"], [0, 1, 1, "", "PrepareReadGasCalibration"], [0, 1, 1, "", "ReadFlow"], [0, 1, 1, "", "ReadGasCalibration"], [0, 1, 1, "", "ReadMeasurementData"], [0, 1, 1, "", "ReadProductIdentifier"], [0, 1, 1, "", "ResetForceCloseValve"], [0, 1, 1, "", "ResetForceOpenValve"], [0, 1, 1, "", "ResetPointerToMeasurementBuffer"], [0, 1, 1, "", "StartAirContinuousMeasurement"], [0, 1, 1, "", "StartArContinuousMeasurement"], [0, 1, 1, "", "StartCo2ContinuousMeasurement"], [0, 1, 1, "", "StartN2oContinuousMeasurement"], [0, 1, 1, "", "StartO2ContinuousMeasurement"], [0, 1, 1, "", "StartO2InAirContinuousMeasurement"], [0, 1, 1, "", "StartRawThermalConductivityContinuousMeasurement"], [0, 1, 1, "", "StatusWordT"], [0, 1, 1, "", "StopContinuousMeasurement"], [0, 1, 1, "", "UpdateCustomerGain"], [0, 1, 1, "", "UpdateGasConcentration"], [0, 1, 1, "", "UpdateInitStep"], [0, 1, 1, "", "UpdateSetpoint"]], "sensirion_i2c_sfx6xxx.commands.DisableRawFlowValues": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.EnableRawFlowValues": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ErrorCodeT": [[0, 2, 1, "", "I2C_ERROR"], [0, 2, 1, "", "TIMEOUT"]], "sensirion_i2c_sfx6xxx.commands.FlowUnitT": [[0, 2, 1, "", "prefix"], [0, 2, 1, "", "time_base"], [0, 2, 1, "", "unit"]], "sensirion_i2c_sfx6xxx.commands.ForceCloseValve": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ForceOpenValve": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.GetRawTemperature": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "rx"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.PrepareReadGasCalibration": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ReadFlow": [[0, 3, 1, "", "pack"], [0, 2, 1, "", "rx"]], "sensirion_i2c_sfx6xxx.commands.ReadGasCalibration": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "rx"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ReadMeasurementData": [[0, 3, 1, "", "pack"], [0, 2, 1, "", "rx"]], "sensirion_i2c_sfx6xxx.commands.ReadProductIdentifier": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "rx"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ResetForceCloseValve": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ResetForceOpenValve": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.ResetPointerToMeasurementBuffer": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartAirContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartArContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartCo2ContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartN2oContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartO2ContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartO2InAirContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StartRawThermalConductivityContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.StatusWordT": [[0, 2, 1, "", "command_code"], [0, 2, 1, "", "flow_controller_functionality"], [0, 2, 1, "", "gas_conc"], [0, 2, 1, "", "pressure_controller_functionality"]], "sensirion_i2c_sfx6xxx.commands.StopContinuousMeasurement": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.UpdateCustomerGain": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.UpdateGasConcentration": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.UpdateInitStep": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.commands.UpdateSetpoint": [[0, 2, 1, "", "CMD_ID"], [0, 3, 1, "", "pack"], [0, 2, 1, "", "tx"]], "sensirion_i2c_sfx6xxx.device": [[0, 1, 1, "", "Sfx6xxxDevice"], [0, 1, 1, "", "Sfx6xxxDeviceBase"]], "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice": [[0, 3, 1, "", "__init__"], [0, 3, 1, "", "get_gas_calibration"], [0, 3, 1, "", "read_flow"], [0, 3, 1, "", "read_flow_raw"], [0, 3, 1, "", "read_measurement_data"], [0, 3, 1, "", "read_measurement_data_raw"], [0, 3, 1, "", "read_raw_temperature"], [0, 3, 1, "", "read_temperature"], [0, 2, 1, "", "sfx6xxx"], [0, 3, 1, "", "start_air_continuous_measurement"], [0, 3, 1, "", "start_ar_continuous_measurement"], [0, 3, 1, "", "start_co2_continuous_measurement"], [0, 3, 1, "", "start_n2o_continuous_measurement"], [0, 3, 1, "", "start_o2_continuous_measurement"], [0, 3, 1, "", "start_o2_in_air_continuous_measurement"], [0, 3, 1, "", "start_raw_thermal_conductivity_continuous_measurement"], [0, 3, 1, "", "update_setpoint"]], "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase": [[0, 3, 1, "", "__init__"], [0, 4, 1, "", "channel"], [0, 3, 1, "", "disable_raw_flow_values"], [0, 3, 1, "", "enable_raw_flow_values"], [0, 3, 1, "", "force_close_valve"], [0, 3, 1, "", "force_open_valve"], [0, 3, 1, "", "get_raw_temperature"], [0, 3, 1, "", "prepare_read_gas_calibration"], [0, 3, 1, "", "read_flow"], [0, 3, 1, "", "read_gas_calibration"], [0, 3, 1, "", "read_measurement_data"], [0, 3, 1, "", "read_product_identifier"], [0, 3, 1, "", "reset_force_close_valve"], [0, 3, 1, "", "reset_force_open_valve"], [0, 3, 1, "", "reset_pointer_to_measurement_buffer"], [0, 3, 1, "", "start_air_continuous_measurement"], [0, 3, 1, "", "start_ar_continuous_measurement"], [0, 3, 1, "", "start_co2_continuous_measurement"], [0, 3, 1, "", "start_n2o_continuous_measurement"], [0, 3, 1, "", "start_o2_continuous_measurement"], [0, 3, 1, "", "start_o2_in_air_continuous_measurement"], [0, 3, 1, "", "start_raw_thermal_conductivity_continuous_measurement"], [0, 3, 1, "", "stop_continuous_measurement"], [0, 3, 1, "", "update_customer_gain"], [0, 3, 1, "", "update_gas_concentration"], [0, 3, 1, "", "update_init_step"], [0, 3, 1, "", "update_setpoint"]], "sensirion_i2c_sfx6xxx.result_types": [[0, 1, 1, "", "SignalFlow"], [0, 1, 1, "", "SignalRawFlow"], [0, 1, 1, "", "SignalTemperature"]], "sensirion_i2c_sfx6xxx.result_types.SignalFlow": [[0, 4, 1, "", "value"]], "sensirion_i2c_sfx6xxx.result_types.SignalRawFlow": [[0, 4, 1, "", "value"]], "sensirion_i2c_sfx6xxx.result_types.SignalTemperature": [[0, 4, 1, "", "value"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "document": [0, 1], "sfx6xxx": [0, 4], "sfx6xxxdevic": 0, "command": 0, "result": 0, "type": 0, "build": 1, "develop": 2, "execut": 3, "measur": 3, "sensorbridg": 3, "exampl": 3, "script": 3, "us": 3, "intern": 3, "linux": 3, "i\u00b2c": 3, "driver": [3, 4], "sensirion": 4, "i2c": 4, "python": 4, "content": 4, "instal": 5, "quick": 6, "start": 6, "run": 7, "test": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "SFX6XXX": [[0, "sfx6xxx"]], "Sfx6xxxDevice": [[0, "module-sensirion_i2c_sfx6xxx.device"]], "Commands": [[0, "module-sensirion_i2c_sfx6xxx.commands"]], "Result Types": [[0, "module-sensirion_i2c_sfx6xxx.result_types"]], "Build documentation": [[1, "build-documentation"]], "Development": [[2, "development"]], "Execute measurements with SensorBridge": [[3, "execute-measurements-with-sensorbridge"]], "Example script": [[3, "example-script"], [3, "id1"]], "Execute measurements using internal Linux I\u00b2C driver": [[3, "execute-measurements-using-internal-linux-i2c-driver"]], "Sensirion SFX6XXX I2C Python Driver": [[4, "sensirion-sfx6xxx-i2c-python-driver"]], "Contents": [[4, "contents"]], "Installation": [[5, "installation"]], "Quick Start": [[6, "quick-start"]], "Run tests": [[7, "run-tests"]]}, "indexentries": {"cmd_id (sensirion_i2c_sfx6xxx.commands.disablerawflowvalues attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.DisableRawFlowValues.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.enablerawflowvalues attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.EnableRawFlowValues.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.forceclosevalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceCloseValve.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.forceopenvalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceOpenValve.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.getrawtemperature attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.GetRawTemperature.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.preparereadgascalibration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.PrepareReadGasCalibration.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.readgascalibration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadGasCalibration.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.readproductidentifier attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadProductIdentifier.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.resetforceclosevalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceCloseValve.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.resetforceopenvalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceOpenValve.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.resetpointertomeasurementbuffer attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetPointerToMeasurementBuffer.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.startaircontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartAirContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.startarcontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartArContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.startco2continuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartCo2ContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.startn2ocontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartN2oContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.starto2continuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2ContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.starto2inaircontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2InAirContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.startrawthermalconductivitycontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartRawThermalConductivityContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.stopcontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StopContinuousMeasurement.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.updatecustomergain attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateCustomerGain.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.updategasconcentration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateGasConcentration.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.updateinitstep attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateInitStep.CMD_ID"]], "cmd_id (sensirion_i2c_sfx6xxx.commands.updatesetpoint attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateSetpoint.CMD_ID"]], "disablerawflowvalues (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.DisableRawFlowValues"]], "enablerawflowvalues (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.EnableRawFlowValues"]], "errorcodet (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ErrorCodeT"]], "flowunitt (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.FlowUnitT"]], "forceclosevalve (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceCloseValve"]], "forceopenvalve (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceOpenValve"]], "getrawtemperature (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.GetRawTemperature"]], "i2c_error (sensirion_i2c_sfx6xxx.commands.errorcodet attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ErrorCodeT.I2C_ERROR"]], "preparereadgascalibration (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.PrepareReadGasCalibration"]], "readflow (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadFlow"]], "readgascalibration (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadGasCalibration"]], "readmeasurementdata (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadMeasurementData"]], "readproductidentifier (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadProductIdentifier"]], "resetforceclosevalve (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceCloseValve"]], "resetforceopenvalve (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceOpenValve"]], "resetpointertomeasurementbuffer (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetPointerToMeasurementBuffer"]], "sfx6xxxdevice (class in sensirion_i2c_sfx6xxx.device)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice"]], "sfx6xxxdevicebase (class in sensirion_i2c_sfx6xxx.device)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase"]], "signalflow (class in sensirion_i2c_sfx6xxx.result_types)": [[0, "sensirion_i2c_sfx6xxx.result_types.SignalFlow"]], "signalrawflow (class in sensirion_i2c_sfx6xxx.result_types)": [[0, "sensirion_i2c_sfx6xxx.result_types.SignalRawFlow"]], "signaltemperature (class in sensirion_i2c_sfx6xxx.result_types)": [[0, "sensirion_i2c_sfx6xxx.result_types.SignalTemperature"]], "startaircontinuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartAirContinuousMeasurement"]], "startarcontinuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartArContinuousMeasurement"]], "startco2continuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartCo2ContinuousMeasurement"]], "startn2ocontinuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartN2oContinuousMeasurement"]], "starto2continuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2ContinuousMeasurement"]], "starto2inaircontinuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2InAirContinuousMeasurement"]], "startrawthermalconductivitycontinuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StartRawThermalConductivityContinuousMeasurement"]], "statuswordt (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StatusWordT"]], "stopcontinuousmeasurement (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.StopContinuousMeasurement"]], "timeout (sensirion_i2c_sfx6xxx.commands.errorcodet attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ErrorCodeT.TIMEOUT"]], "updatecustomergain (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateCustomerGain"]], "updategasconcentration (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateGasConcentration"]], "updateinitstep (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateInitStep"]], "updatesetpoint (class in sensirion_i2c_sfx6xxx.commands)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateSetpoint"]], "__init__() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.__init__"]], "__init__() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.__init__"]], "channel (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase property)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.channel"]], "command_code (sensirion_i2c_sfx6xxx.commands.statuswordt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StatusWordT.command_code"]], "disable_raw_flow_values() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.disable_raw_flow_values"]], "enable_raw_flow_values() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.enable_raw_flow_values"]], "flow_controller_functionality (sensirion_i2c_sfx6xxx.commands.statuswordt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StatusWordT.flow_controller_functionality"]], "force_close_valve() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.force_close_valve"]], "force_open_valve() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.force_open_valve"]], "gas_conc (sensirion_i2c_sfx6xxx.commands.statuswordt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StatusWordT.gas_conc"]], "get_gas_calibration() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.get_gas_calibration"]], "get_raw_temperature() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.get_raw_temperature"]], "module": [[0, "module-sensirion_i2c_sfx6xxx.commands"], [0, "module-sensirion_i2c_sfx6xxx.device"], [0, "module-sensirion_i2c_sfx6xxx.result_types"]], "pack() (sensirion_i2c_sfx6xxx.commands.disablerawflowvalues method)": [[0, "sensirion_i2c_sfx6xxx.commands.DisableRawFlowValues.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.enablerawflowvalues method)": [[0, "sensirion_i2c_sfx6xxx.commands.EnableRawFlowValues.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.forceclosevalve method)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceCloseValve.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.forceopenvalve method)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceOpenValve.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.getrawtemperature method)": [[0, "sensirion_i2c_sfx6xxx.commands.GetRawTemperature.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.preparereadgascalibration method)": [[0, "sensirion_i2c_sfx6xxx.commands.PrepareReadGasCalibration.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.readflow method)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadFlow.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.readgascalibration method)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadGasCalibration.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.readmeasurementdata method)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadMeasurementData.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.readproductidentifier method)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadProductIdentifier.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.resetforceclosevalve method)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceCloseValve.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.resetforceopenvalve method)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceOpenValve.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.resetpointertomeasurementbuffer method)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetPointerToMeasurementBuffer.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.startaircontinuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartAirContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.startarcontinuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartArContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.startco2continuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartCo2ContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.startn2ocontinuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartN2oContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.starto2continuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2ContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.starto2inaircontinuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2InAirContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.startrawthermalconductivitycontinuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StartRawThermalConductivityContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.stopcontinuousmeasurement method)": [[0, "sensirion_i2c_sfx6xxx.commands.StopContinuousMeasurement.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.updatecustomergain method)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateCustomerGain.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.updategasconcentration method)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateGasConcentration.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.updateinitstep method)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateInitStep.pack"]], "pack() (sensirion_i2c_sfx6xxx.commands.updatesetpoint method)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateSetpoint.pack"]], "prefix (sensirion_i2c_sfx6xxx.commands.flowunitt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.FlowUnitT.prefix"]], "prepare_read_gas_calibration() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.prepare_read_gas_calibration"]], "pressure_controller_functionality (sensirion_i2c_sfx6xxx.commands.statuswordt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StatusWordT.pressure_controller_functionality"]], "read_flow() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.read_flow"]], "read_flow() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.read_flow"]], "read_flow_raw() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.read_flow_raw"]], "read_gas_calibration() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.read_gas_calibration"]], "read_measurement_data() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.read_measurement_data"]], "read_measurement_data() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.read_measurement_data"]], "read_measurement_data_raw() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.read_measurement_data_raw"]], "read_product_identifier() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.read_product_identifier"]], "read_raw_temperature() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.read_raw_temperature"]], "read_temperature() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.read_temperature"]], "reset_force_close_valve() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.reset_force_close_valve"]], "reset_force_open_valve() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.reset_force_open_valve"]], "reset_pointer_to_measurement_buffer() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.reset_pointer_to_measurement_buffer"]], "rx (sensirion_i2c_sfx6xxx.commands.getrawtemperature attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.GetRawTemperature.rx"]], "rx (sensirion_i2c_sfx6xxx.commands.readflow attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadFlow.rx"]], "rx (sensirion_i2c_sfx6xxx.commands.readgascalibration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadGasCalibration.rx"]], "rx (sensirion_i2c_sfx6xxx.commands.readmeasurementdata attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadMeasurementData.rx"]], "rx (sensirion_i2c_sfx6xxx.commands.readproductidentifier attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadProductIdentifier.rx"]], "sensirion_i2c_sfx6xxx.commands": [[0, "module-sensirion_i2c_sfx6xxx.commands"]], "sensirion_i2c_sfx6xxx.device": [[0, "module-sensirion_i2c_sfx6xxx.device"]], "sensirion_i2c_sfx6xxx.result_types": [[0, "module-sensirion_i2c_sfx6xxx.result_types"]], "sfx6xxx (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice attribute)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.sfx6xxx"]], "start_air_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_air_continuous_measurement"]], "start_air_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_air_continuous_measurement"]], "start_ar_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_ar_continuous_measurement"]], "start_ar_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_ar_continuous_measurement"]], "start_co2_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_co2_continuous_measurement"]], "start_co2_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_co2_continuous_measurement"]], "start_n2o_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_n2o_continuous_measurement"]], "start_n2o_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_n2o_continuous_measurement"]], "start_o2_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_o2_continuous_measurement"]], "start_o2_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_o2_continuous_measurement"]], "start_o2_in_air_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_o2_in_air_continuous_measurement"]], "start_o2_in_air_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_o2_in_air_continuous_measurement"]], "start_raw_thermal_conductivity_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.start_raw_thermal_conductivity_continuous_measurement"]], "start_raw_thermal_conductivity_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.start_raw_thermal_conductivity_continuous_measurement"]], "stop_continuous_measurement() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.stop_continuous_measurement"]], "time_base (sensirion_i2c_sfx6xxx.commands.flowunitt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.FlowUnitT.time_base"]], "tx (sensirion_i2c_sfx6xxx.commands.disablerawflowvalues attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.DisableRawFlowValues.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.enablerawflowvalues attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.EnableRawFlowValues.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.forceclosevalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceCloseValve.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.forceopenvalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ForceOpenValve.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.getrawtemperature attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.GetRawTemperature.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.preparereadgascalibration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.PrepareReadGasCalibration.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.readgascalibration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadGasCalibration.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.readproductidentifier attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ReadProductIdentifier.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.resetforceclosevalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceCloseValve.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.resetforceopenvalve attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetForceOpenValve.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.resetpointertomeasurementbuffer attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.ResetPointerToMeasurementBuffer.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.startaircontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartAirContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.startarcontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartArContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.startco2continuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartCo2ContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.startn2ocontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartN2oContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.starto2continuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2ContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.starto2inaircontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartO2InAirContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.startrawthermalconductivitycontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StartRawThermalConductivityContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.stopcontinuousmeasurement attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.StopContinuousMeasurement.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.updatecustomergain attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateCustomerGain.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.updategasconcentration attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateGasConcentration.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.updateinitstep attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateInitStep.tx"]], "tx (sensirion_i2c_sfx6xxx.commands.updatesetpoint attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.UpdateSetpoint.tx"]], "unit (sensirion_i2c_sfx6xxx.commands.flowunitt attribute)": [[0, "sensirion_i2c_sfx6xxx.commands.FlowUnitT.unit"]], "update_customer_gain() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.update_customer_gain"]], "update_gas_concentration() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.update_gas_concentration"]], "update_init_step() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.update_init_step"]], "update_setpoint() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevice method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDevice.update_setpoint"]], "update_setpoint() (sensirion_i2c_sfx6xxx.device.sfx6xxxdevicebase method)": [[0, "sensirion_i2c_sfx6xxx.device.Sfx6xxxDeviceBase.update_setpoint"]], "value (sensirion_i2c_sfx6xxx.result_types.signalflow property)": [[0, "sensirion_i2c_sfx6xxx.result_types.SignalFlow.value"]], "value (sensirion_i2c_sfx6xxx.result_types.signalrawflow property)": [[0, "sensirion_i2c_sfx6xxx.result_types.SignalRawFlow.value"]], "value (sensirion_i2c_sfx6xxx.result_types.signaltemperature property)": [[0, "sensirion_i2c_sfx6xxx.result_types.SignalTemperature.value"]]}})